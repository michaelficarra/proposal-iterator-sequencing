<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Iterator Sequencing
status: proposal
stage: 1
contributors: Michael Ficarra
location: https://tc39.es/proposal-iterator-sequencing/
copyright: false
</pre>

<emu-clause id="sec-iterator.from">
  <h1>Iterator.from ( ..._items_ )</h1>
  <emu-alg>
    1. If the number of elements in _items_ is 1, then
      1. Let _iter_ be the first element of _items_.
      1. Let _iteratorRecord_ be ? GetIteratorFlattenable(_iter_, ~iterate-strings~).
      1. Let _hasInstance_ be ? OrdinaryHasInstance(%Iterator%, _iteratorRecord_.[[Iterator]]).
      1. If _hasInstance_ is *true*, then
        1. Return _iteratorRecord_.[[Iterator]].
      1. Let _wrapper_ be OrdinaryObjectCreate(%WrapForValidIteratorPrototype%, « [[Iterated]] »).
      1. Set _wrapper_.[[Iterated]] to _iteratorRecord_.
      1. Return _wrapper_.
    1. Let _closure_ be a new Abstract Closure with no parameters that captures _items_ and performs the following steps when called:
      1. Repeat, while _items_ is not empty,
        1. Let _iter_ be the first element of _items_.
        1. Remove the first element from _items_.
        1. Let _iteratorRecord_ be ? GetIteratorFlattenable(_iter_, ~iterate-strings~).
        1. Let _innerAlive_ be *true*.
        1. Repeat, while _innerAlive_ is *true*,
          1. Let _innerNext_ be ? IteratorStep(_iteratorRecord_).
          1. If _innerNext_ is *false*, then
            1. Set _innerAlive_ to *false*.
          1. Else,
            1. Let _innerValue_ be ? IteratorValue(_innerNext_).
            1. Let _completion_ be Completion(Yield(_innerValue_)).
            1. If _completion_ is an abrupt completion, then
              1. Return ? IteratorClose(_iteratorRecord_, _completion_).
    1. Return CreateIteratorFromClosure(_closure_, *"Iterator Helper"*, %IteratorHelperPrototype%, « »).
  </emu-alg>
</emu-clause>

<emu-clause id="sec-iteratorprototype.flat">
  <h1>Iterator.prototype.flat ( )</h1>
  <p>This method performs the following steps when called:</p>
  <emu-alg>
    1. Let _O_ be the *this* value.
    1. If _O_ is not an Object, throw a *TypeError* exception.
    1. Let _iterated_ be ? GetIteratorDirect(_O_).
    1. Let _closure_ be a new Abstract Closure with no parameters that captures _iterated_ and performs the following steps when called:
      1. Repeat,
        1. Let _next_ be ? IteratorStep(_iterated_).
        1. If _next_ is *false*, return *undefined*.
        1. Let _value_ be ? IteratorValue(_next_).
        1. Let _innerIterator_ be Completion(GetIteratorFlattenable(_value_, ~reject-strings~)).
        1. IfAbruptCloseIterator(_innerIterator_, _iterated_).
        1. Let _innerAlive_ be *true*.
        1. Repeat, while _innerAlive_ is *true*,
          1. Let _innerNext_ be Completion(IteratorStep(_innerIterator_)).
          1. IfAbruptCloseIterator(_innerNext_, _iterated_).
          1. If _innerNext_ is *false*, then
            1. Set _innerAlive_ to *false*.
          1. Else,
            1. Let _innerValue_ be Completion(IteratorValue(_innerNext_)).
            1. IfAbruptCloseIterator(_innerValue_, _iterated_).
            1. Let _completion_ be Completion(Yield(_innerValue_)).
            1. If _completion_ is an abrupt completion, then
              1. Let _backupCompletion_ be Completion(IteratorClose(_innerIterator_, _completion_)).
              1. IfAbruptCloseIterator(_backupCompletion_, _iterated_).
              1. Return ? IteratorClose(_completion_, _iterated_).
    1. Let _result_ be CreateIteratorFromClosure(_closure_, *"Iterator Helper"*, %IteratorHelperPrototype%, « [[UnderlyingIterator]] »).
    1. Set _result_.[[UnderlyingIterator]] to _iterated_.
    1. Return _result_.
  </emu-alg>
</emu-clause>
