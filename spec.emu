<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Iterator Sequencing
status: proposal
stage: 2
contributors: Michael Ficarra
location: https://tc39.es/proposal-iterator-sequencing/
copyright: false
</pre>

<emu-clause id="sec-iterator.concat">
  <h1>Iterator.concat ( ..._items_ )</h1>
  <emu-alg>
    1. Let _iteratorRecords_ be a new empty List.
    1. For each element _item_ of _items_, do
      1. Append ? GetIteratorFlattenable(_item_, ~reject-strings~) to _iteratorRecords_.
    1. Let _closure_ be a new Abstract Closure with no parameters that captures _iteratorRecords_ and performs the following steps when called:
      1. Repeat, while _iteratorRecords_ is not empty,
        1. Let _iteratorRecord_ be the first element of _iteratorRecords_.
        1. Remove the first element from _iteratorRecords_.
        1. Let _innerAlive_ be *true*.
        1. Repeat, while _innerAlive_ is *true*,
          1. Let _innerValue_ be ? IteratorStepValue(_iteratorRecord_).
          1. If _innerValue_ is ~done~, then
            1. Set _innerAlive_ to *false*.
          1. Else,
            1. Let _completion_ be Completion(Yield(_innerValue_)).
            1. If _completion_ is an abrupt completion, then
              1. Set _completion_ to Completion(IteratorClose(_iteratorRecord_, _completion_)).
              1. For each element _trailingIter_ of _iteratorRecords_, do
                1. Set _completion_ to Completion(IteratorClose(_trailingIter_, _completion_)).
              1. Return ? _completion_.
      1. Return ReturnCompletion(*undefined*).
    1. Return CreateIteratorFromClosure(_closure_, *"Iterator Helper"*, %IteratorHelperPrototype%, « »).
  </emu-alg>
</emu-clause>
